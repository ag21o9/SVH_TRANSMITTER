const { width } = Dimensions.get('window');interface DeviceConfig {  backend: string;  ipPortPairs: { id: string; ip: string; port: string; }[];  deviceImei: string;  vendorId: string;  vehicleNumber: string;  networkProvider: string;  firmwareVersion: string;  useGpsCoordinates: boolean;  latitude: string;  longitude: string;}interface PacketResponse {  id: string;  timestamp: string;  packet: string;  host: string;  port: string;  response: string;  status: 'success' | 'error';  type: 'login' | 'pvt';}interface TransmissionPageProps {  config: DeviceConfig;  onBack: () => void;}// HTTP Connection Managerclass HTTPConnectionManager {  private intervals: Map<string, NodeJS.Timeout> = new Map();  private backendUrl = 'https://ais-140-emulator-be.vercel.app/sendpacket';  async sendPacket(    packet: string,     host: string,     port: string,     type: 'login' | 'pvt',    onResponse: (response: PacketResponse) => void  ) {    const timestamp = new Date().toLocaleTimeString();    const packetId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;    try {      const payload = {        packet: packet,        PORT: port,        HOST: host      };      console.log('📤 Sending packet:', payload);      const response = await fetch(this.backendUrl, {        method: 'POST',        headers: {          'Content-Type': 'application/json',        },        body: JSON.stringify(payload)      });      const responseText = await response.text();      console.log('📥 Response:', responseText);      onResponse({        id: packetId,        timestamp,        packet,        host,        port,        response: responseText || 'Success',        status: response.ok ? 'success' : 'error',        type      });    } catch (error) {      console.error('🚨 Error sending packet:', error);            onResponse({        id: packetId,        timestamp,        packet,        host,        port,        response: error instanceof Error ? error.message : 'Unknown error',        status: 'error',        type      });    }  }  startTransmission(    serverConfigs: {ip: string, port: string, id: string}[],     deviceConfig: any,     onResponse: (response: PacketResponse) => void  ) {    console.log('🚀 Starting HTTP transmission to', serverConfigs.length, 'servers');    // Send initial login packets    serverConfigs.forEach(async (serverConfig) => {      const loginPacket = this.buildLoginPacket(deviceConfig);      await this.sendPacket(loginPacket, serverConfig.ip, serverConfig.port, 'login', onResponse);    });    // Set up intervals for PVT packets (every 5 seconds)    serverConfigs.forEach((serverConfig) => {      const interval = setInterval(async () => {        const pvtPacket = this.buildPvtPacket(deviceConfig);        await this.sendPacket(pvtPacket, serverConfig.ip, serverConfig.port, 'pvt', onResponse);      }, 5000);      this.intervals.set(serverConfig.id, interval);    });  }  stopTransmission() {    console.log('🛑 Stopping all transmissions...');    this.intervals.forEach((interval) => {      clearInterval(interval);    });    this.intervals.clear();  }  isTransmitting(): boolean {    return this.intervals.size > 0;  }  private calculateChecksum(sentence: string): string {    let checksum = 0;    for (let i = 1; i < sentence.length; i++) {      checksum ^= sentence.charCodeAt(i);    }    return checksum.toString(16).toUpperCase().padStart(2, '0');  }  private buildPvtPacket(input: any): string {    const now = new Date();    const pad = (num: number, size: number) => num.toString().padStart(size, '0');    const dateStr = `${pad(now.getDate(), 2)}${pad(now.getMonth() + 1, 2)}${now.getFullYear()}`;    const timeStr = `${pad(now.getHours(), 2)}${pad(now.getMinutes(), 2)}${pad(now.getSeconds(), 2)}`;    const fields = [      '$PVT',      input.vendorId || 'VNDR',      input.firmwareVersion || 'FIRMWAREVER1.0',      'NR',      '1',      'L',      input.deviceImei,      (input.vehicleNumber || '').replace(/[^A-Z0-9]/gi, '').padStart(16, '0'),      '1',      dateStr,      timeStr,      input.latitude || '31.589618',      'N',      input.longitude || '75.875231',      'E',      '0',      '117.58',      '39',      '286.7',      '0.42',      '0.43',      input.networkProvider || 'AIRTEL',      '0',      '1',      '12.2',      '4.1',      '0',      'C',      '12',      '404',      '53',      '16C7',      'E4C2',      '2138', '700000', '29',      '2137', '700000', '21',      '2136', '700000', '21',      '968A', '70000', '19',      '0000', '0000', '00',      '0',      '492894',      '00AC'    ];    const payloadWithoutChecksum = fields.join(',');    const checksum = this.calculateChecksum(payloadWithoutChecksum);    return `${payloadWithoutChecksum}*${checksum}`;  }  private buildLoginPacket(input: any): string {    const fields = [      '$LGN',      input.vendorId || 'VNDR',      input.deviceImei,      input.firmwareVersion || 'FIRMWAREVER1.0',      'AIS140',      input.latitude || '31.589618',      input.longitude || '75.875231'    ];        const payloadWithoutChecksum = fields.join(',');    const checksum = this.calculateChecksum(payloadWithoutChecksum);    return `${payloadWithoutChecksum}*${checksum}`;  }}const TransmissionPage: React.FC<TransmissionPageProps> = ({ config, onBack }) => {  const [httpManager] = useState(() => new HTTPConnectionManager());  const [isTransmitting, setIsTransmitting] = useState(false);  const [packetResponses, setPacketResponses] = useState<PacketResponse[]>([]);  const [transmissionStartTime, setTransmissionStartTime] = useState<Date | null>(null);  const [elapsedTime, setElapsedTime] = useState(0);    const scrollViewRef = useRef<ScrollView>(null);  const pulseAnim = useRef(new Animated.Value(1)).current;  const fadeAnim = useRef(new Animated.Value(0)).current;  // Timer for elapsed time  useEffect(() => {    let interval: NodeJS.Timeout;    if (isTransmitting && transmissionStartTime) {      interval = setInterval(() => {        setElapsedTime(Math.floor((Date.now() - transmissionStartTime.getTime()) / 1000));      }, 1000);    }    return () => {      if (interval) clearInterval(interval);    };  }, [isTransmitting, transmissionStartTime]);  // Pulse animation for live indicator  useEffect(() => {    if (isTransmitting) {      const pulse = Animated.loop(        Animated.sequence([          Animated.timing(pulseAnim, {            toValue: 1.3,            duration: 1000,            useNativeDriver: true,          }),          Animated.timing(pulseAnim, {            toValue: 1,            duration: 1000,            useNativeDriver: true,          }),        ])      );      pulse.start();      return () => pulse.stop();    } else {      pulseAnim.setValue(1);    }  }, [isTransmitting]);  // Fade in animation  useEffect(() => {    Animated.timing(fadeAnim, {      toValue: 1,      duration: 500,      useNativeDriver: true,    }).start();  }, []);  // Auto-scroll to bottom when new responses arrive  useEffect(() => {    if (packetResponses.length > 0) {      setTimeout(() => {        scrollViewRef.current?.scrollToEnd({ animated: true });      }, 100);    }  }, [packetResponses.length]);  const handlePacketResponse = useCallback((response: PacketResponse) => {    setPacketResponses(prev => [...prev, response]);  }, []);  const handleStartTransmission = useCallback(() => {    try {      setIsTransmitting(true);      setTransmissionStartTime(new Date());      setPacketResponses([]);      const deviceConfig = {        vendorId: config.vendorId?.trim() || 'VNDR',        firmwareVersion: config.firmwareVersion?.trim() || 'FIRMWAREVER1.0',        deviceImei: config.deviceImei?.trim() || '',        vehicleNumber: config.vehicleNumber?.trim() || '',        networkProvider: config.networkProvider?.toUpperCase() || 'AIRTEL',        latitude: config.useGpsCoordinates ? '31.589618' : (config.latitude?.trim() || '31.589618'),        longitude: config.useGpsCoordinates ? '75.875231' : (config.longitude?.trim() || '75.875231')      };      const validPairs = config.ipPortPairs.filter(pair =>         pair.ip?.trim() && pair.port?.trim()      );      const serverConfigs = validPairs.map((pair, index) => ({        ip: pair.ip.trim(),        port: pair.port.trim(),        id: `server_${index + 1}`      }));      httpManager.startTransmission(serverConfigs, deviceConfig, handlePacketResponse);    } catch (error) {      console.error('🚨 Error starting transmission:', error);      setIsTransmitting(false);      Alert.alert('Error', `Failed to start transmission: ${error}`);    }  }, [config, httpManager, handlePacketResponse]);  const handleStopTransmission = useCallback(() => {    try {      httpManager.stopTransmission();      setIsTransmitting(false);      setTransmissionStartTime(null);    } catch (error) {      console.error('🚨 Error stopping transmission:', error);      Alert.alert('Error', `Failed to stop transmission: ${error}`);    }  }, [httpManager]);  const shareResponses = async () => {    try {      const content = packetResponses.map(item =>         `[${item.timestamp}] ${item.type.toUpperCase()} - ${item.host}:${item.port} - ${item.status.toUpperCase()}\n` +        `Packet: ${item.packet}\n` +        `Response: ${item.response}\n\n`      ).join('');            await Share.share({        message: `TrackerSHV Transmission Log\nDuration: ${formatTime(elapsedTime)}\n\n${content}`,        title: 'Transmission Log',      });    } catch (error) {      console.error('Error sharing:', error);    }  };  const clearResponses = () => {    Alert.alert(      'Clear Responses',      'Are you sure you want to clear all responses?',      [        { text: 'Cancel', style: 'cancel' },        { text: 'Clear', style: 'destructive', onPress: () => setPacketResponses([]) }      ]    );  };  const formatTime = (seconds: number) => {    const hrs = Math.floor(seconds / 3600);    const mins = Math.floor((seconds % 3600) / 60);    const secs = seconds % 60;    return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;  };  const getStatusStats = () => {    const success = packetResponses.filter(r => r.status === 'success').length;    const error = packetResponses.filter(r => r.status === 'error').length;    const login = packetResponses.filter(r => r.type === 'login').length;    const pvt = packetResponses.filter(r => r.type === 'pvt').length;    return { success, error, login, pvt, total: packetResponses.length };  };  const stats = getStatusStats();  // Start transmission automatically when page loads  useEffect(() => {    handleStartTransmission();    return () => {      if (httpManager.isTransmitting()) {        httpManager.stopTransmission();      }    };  }, []);  return (    <Animated.View style={[styles.container, { opacity: fadeAnim }]}>      <SafeAreaView style={styles.safeArea}>        <StatusBar barStyle="light-content" backgroundColor="#1A237E" />                {/* Header */}        <View style={styles.header}>          <View style={styles.headerTop}>            <TouchableOpacity               style={styles.backButton}               onPress={onBack}              activeOpacity={0.8}            >              <Text style={styles.backButtonText}>←</Text>            </TouchableOpacity>                        <View style={styles.headerCenter}>              <Text style={styles.headerTitle}>Live Transmission</Text>              <View style={styles.liveIndicator}>                {isTransmitting && (                  <Animated.View style={[                    styles.liveDot,                     { transform: [{ scale: pulseAnim }] }                  ]} />                )}                <Text style={styles.liveText}>                  {isTransmitting ? 'TRANSMITTING' : 'STOPPED'}                </Text>              </View>            </View>                        <View style={styles.headerActions}>              <TouchableOpacity                 style={styles.headerButton}                 onPress={shareResponses}                activeOpacity={0.8}              >                <Text style={styles.headerButtonText}>📤</Text>              </TouchableOpacity>              <TouchableOpacity                 style={styles.headerButton}                 onPress={clearResponses}                activeOpacity={0.8}              >                <Text style={styles.headerButtonText}>🗑️</Text>              </TouchableOpacity>            </View>          </View>          {/* Timer and Stats */}          <View style={styles.statsContainer}>            <View style={styles.timerContainer}>              <Text style={styles.timerIcon}>⏱️</Text>              <Text style={styles.timerText}>{formatTime(elapsedTime)}</Text>            </View>                        <View style={styles.statsRow}>              <View style={styles.statItem}>                <Text style={styles.statText}>📊 Total: {stats.total}</Text>              </View>              <View style={styles.statItem}>                <Text style={styles.statText}>✅ Success: {stats.success}</Text>              </View>              <View style={styles.statItem}>                <Text style={styles.statText}>❌ Errors: {stats.error}</Text>              </View>            </View>          </View>        </View>        {/* Device Info Card */}        <View style={styles.deviceInfoCard}>          <View style={styles.deviceInfoHeader}>            <Text style={styles.deviceInfoIcon}>📱</Text>            <Text style={styles.deviceInfoTitle}>Device Information</Text>          </View>          <View style={styles.deviceInfoContent}>            <View style={styles.deviceInfoRow}>              <Text style={styles.deviceInfoLabel}>IMEI:</Text>              <Text style={styles.deviceInfoValue}>{config.deviceImei}</Text>            </View>            <View style={styles.deviceInfoRow}>              <Text style={styles.deviceInfoLabel}>Vehicle:</Text>              <Text style={styles.deviceInfoValue}>{config.vehicleNumber}</Text>            </View>            <View style={styles.deviceInfoRow}>              <Text style={styles.deviceInfoLabel}>Servers:</Text>              <Text style={styles.deviceInfoValue}>                {config.ipPortPairs.map(p => `${p.ip}:${p.port}`).join(', ')}              </Text>            </View>          </View>        </View>        {/* Responses List */}        <View style={styles.responsesContainer}>          <View style={styles.responsesHeader}>            <Text style={styles.responsesTitle}>Packet Responses</Text>            <View style={styles.packetTypeStats}>              <View style={styles.packetTypeBadge}>                <Text style={styles.packetTypeText}>LOGIN: {stats.login}</Text>              </View>              <View style={styles.packetTypeBadge}>                <Text style={styles.packetTypeText}>PVT: {stats.pvt}</Text>              </View>            </View>          </View>                    {packetResponses.length === 0 ? (            <View style={styles.emptyState}>              <Text style={styles.emptyIcon}>📡</Text>              <Text style={styles.emptyText}>Waiting for responses...</Text>            </View>          ) : (            <ScrollView              ref={scrollViewRef}              style={styles.responsesList}              showsVerticalScrollIndicator={false}            >              {packetResponses.map((response, index) => (                <ResponseCard key={response.id} response={response} index={index} />              ))}            </ScrollView>          )}        </View>        {/* Control Button */}        <View style={styles.controlContainer}>          <TouchableOpacity             style={[              styles.controlButton,              isTransmitting ? styles.stopButton : styles.startButton            ]}             onPress={isTransmitting ? handleStopTransmission : handleStartTransmission}            activeOpacity={0.9}          >            <Text style={styles.controlButtonIcon}>              {isTransmitting ? "⏹️" : "▶️"}            </Text>            <Text style={styles.controlButtonText}>              {isTransmitting ? "Stop Transmission" : "Resume Transmission"}            </Text>          </TouchableOpacity>        </View>      </SafeAreaView>    </Animated.View>  );};// Response Card Componentconst ResponseCard: React.FC<{ response: PacketResponse; index: number }> = ({   response,   index }) => {  const [expanded, setExpanded] = useState(false);  const slideAnim = useRef(new Animated.Value(50)).current;  const opacityAnim = useRef(new Animated.Value(0)).current;  useEffect(() => {    Animated.parallel([      Animated.timing(slideAnim, {        toValue: 0,        duration: 400,        delay: index * 100,        useNativeDriver: true,      }),      Animated.timing(opacityAnim, {        toValue: 1,        duration: 400,        delay: index * 100,        useNativeDriver: true,      })    ]).start();  }, []);  return (    <Animated.View style={[      styles.responseCard,      response.status === 'error' ? styles.responseCardError : styles.responseCardSuccess,      {        opacity: opacityAnim,        transform: [{ translateX: slideAnim }]      }    ]}>      <TouchableOpacity         style={styles.responseCardHeader}         onPress={() => setExpanded(!expanded)}        activeOpacity={0.8}      >        <View style={styles.responseCardLeft}>          <View style={[            styles.responseStatusIcon,            response.status === 'success' ? styles.statusIconSuccess : styles.statusIconError          ]}>            <Text style={styles.statusIconText}>              {response.status === 'success' ? '✓' : '✗'}            </Text>          </View>          <View style={styles.responseCardInfo}>            <View style={styles.responseCardTopRow}>              <Text style={styles.responseTimestamp}>{response.timestamp}</Text>              <View style={[                styles.packetTypeBadge,                response.type === 'login' ? styles.loginBadge : styles.pvtBadge              ]}>                <Text style={styles.packetTypeText}>{response.type.toUpperCase()}</Text>              </View>            </View>            <Text style={styles.responseServer}>{response.host}:{response.port}</Text>          </View>        </View>        <Text style={styles.expandIcon}>          {expanded ? "⌄" : "⌃"}        </Text>      </TouchableOpacity>      {expanded && (        <View style={styles.responseCardContent}>          <View style={styles.responseSection}>            <Text style={styles.responseSectionTitle}>📤 Packet Sent</Text>            <ScrollView horizontal showsHorizontalScrollIndicator={false}>              <Text style={styles.packetText} selectable>                {response.packet}              </Text>            </ScrollView>          </View>          <View style={styles.responseSection}>            <Text style={styles.responseSectionTitle}>📥 Server Response</Text>            <Text style={[              styles.responseText,              response.status === 'error' && styles.responseTextError            ]} selectable>              {response.response}            </Text>          </View>        </View>      )}    </Animated.View>  );};// Stylesconst styles = StyleSheet.create({  container: {    flex: 1,    backgroundColor: '#F8FAFC',  },  safeArea: {    flex: 1,  },  header: {    backgroundColor: '#1A237E',    paddingTop: 8,    paddingBottom: 16,    borderBottomLeftRadius: 24,    borderBottomRightRadius: 24,    elevation: 8,    shadowColor: '#000',    shadowOffset: { width: 0, height: 4 },    shadowOpacity: 0.3,    shadowRadius: 8,  },  headerTop: {    flexDirection: 'row',    alignItems: 'center',    paddingHorizontal: 20,    paddingVertical: 12,  },  backButton: {    padding: 8,    borderRadius: 12,    backgroundColor: 'rgba(255,255,255,0.2)',  },  backButtonText: {    fontSize: 24,    color: '#fff',    fontWeight: 'bold',  },  headerCenter: {    flex: 1,    alignItems: 'center',    marginHorizontal: 16,  },  headerTitle: {    fontSize: 20,    fontWeight: '700',    color: '#fff',    marginBottom: 4,  },  liveIndicator: {    flexDirection: 'row',    alignItems: 'center',  },  liveDot: {    width: 8,    height: 8,    borderRadius: 4,    backgroundColor: '#4CAF50',    marginRight: 6,  },  liveText: {    fontSize: 12,    fontWeight: '600',    color: '#fff',    letterSpacing: 1,  },  headerActions: {    flexDirection: 'row',    gap: 8,  },  headerButton: {    padding: 8,    borderRadius: 12,    backgroundColor: 'rgba(255,255,255,0.2)',  },  headerButtonText: {    fontSize: 18,  },  statsContainer: {    paddingHorizontal: 20,    paddingTop: 8,  },  timerContainer: {    flexDirection: 'row',    alignItems: 'center',    justifyContent: 'center',    marginBottom: 12,  },  timerIcon: {    fontSize: 18,    marginRight: 8,  },  timerText: {    fontSize: 18,    fontWeight: '700',    color: '#fff',    fontFamily: 'monospace',  },  statsRow: {    flexDirection: 'row',    justifyContent: 'space-around',  },  statItem: {    alignItems: 'center',  },  statText: {    color: '#fff',    fontSize: 11,    fontWeight: '600',  },  deviceInfoCard: {    backgroundColor: '#fff',    marginHorizontal: 16,    marginTop: 16,    borderRadius: 16,    padding: 16,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 8,    elevation: 4,  },  deviceInfoHeader: {    flexDirection: 'row',    alignItems: 'center',    marginBottom: 12,    paddingBottom: 8,    borderBottomWidth: 1,    borderBottomColor: '#E2E8F0',  },  deviceInfoIcon: {    fontSize: 20,    marginRight: 8,  },  deviceInfoTitle: {    fontSize: 16,    fontWeight: '700',    color: '#334155',  },  deviceInfoContent: {    gap: 8,  },  deviceInfoRow: {    flexDirection: 'row',    justifyContent: 'space-between',    alignItems: 'center',  },  deviceInfoLabel: {    fontSize: 14,    fontWeight: '600',    color: '#64748B',  },  deviceInfoValue: {    fontSize: 14,    fontWeight: '500',    color: '#334155',    flex: 1,    textAlign: 'right',  },  responsesContainer: {    flex: 1,    marginHorizontal: 16,    marginTop: 16,    backgroundColor: '#fff',    borderRadius: 16,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.1,    shadowRadius: 8,    elevation: 4,  },  responsesHeader: {    flexDirection: 'row',    justifyContent: 'space-between',    alignItems: 'center',    padding: 16,    borderBottomWidth: 1,    borderBottomColor: '#E2E8F0',  },  responsesTitle: {    fontSize: 16,    fontWeight: '700',    color: '#334155',  },  packetTypeStats: {    flexDirection: 'row',    gap: 8,  },  packetTypeBadge: {    backgroundColor: '#F1F5F9',    paddingHorizontal: 8,    paddingVertical: 4,    borderRadius: 8,    borderWidth: 1,    borderColor: '#E2E8F0',  },  packetTypeText: {    fontSize: 10,    fontWeight: '600',    color: '#64748B',  },  emptyState: {    flex: 1,    justifyContent: 'center',    alignItems: 'center',    paddingVertical: 40,  },  emptyIcon: {    fontSize: 48,    marginBottom: 12,  },  emptyText: {    fontSize: 16,    color: '#64748B',  },  responsesList: {    flex: 1,    padding: 16,  },  responseCard: {    backgroundColor: '#FAFBFC',    borderRadius: 12,    marginBottom: 12,    borderLeftWidth: 4,    shadowColor: '#000',    shadowOffset: { width: 0, height: 1 },    shadowOpacity: 0.05,    shadowRadius: 4,    elevation: 2,  },  responseCardSuccess: {    borderLeftColor: '#4CAF50',  },  responseCardError: {    borderLeftColor: '#FF5252',  },  responseCardHeader: {    flexDirection: 'row',    justifyContent: 'space-between',    alignItems: 'center',    padding: 12,  },  responseCardLeft: {    flexDirection: 'row',    alignItems: 'center',    flex: 1,  },  responseStatusIcon: {    width: 24,    height: 24,    borderRadius: 12,    justifyContent: 'center',    alignItems: 'center',    marginRight: 12,  },  statusIconSuccess: {    backgroundColor: '#4CAF50',  },  statusIconError: {    backgroundColor: '#FF5252',  },  statusIconText: {    color: '#fff',    fontSize: 14,    fontWeight: 'bold',  },  responseCardInfo: {    flex: 1,  },  responseCardTopRow: {    flexDirection: 'row',    justifyContent: 'space-between',    alignItems: 'center',    marginBottom: 4,  },  responseTimestamp: {    fontSize: 14,    fontWeight: '600',    color: '#334155',  },  loginBadge: {    backgroundColor: '#E3F2FD',    borderColor: '#2196F3',  },  pvtBadge: {    backgroundColor: '#F3E5F5',    borderColor: '#9C27B0',  },  responseServer: {    fontSize: 12,    color: '#64748B',    fontWeight: '500',  },  expandIcon: {    fontSize: 20,    color: '#64748B',  },  responseCardContent: {    paddingHorizontal: 12,    paddingBottom: 12,  },  responseSection: {    marginBottom: 12,  },  responseSectionTitle: {    fontSize: 12,    fontWeight: '600',    color: '#475569',    marginBottom: 6,  },  packetText: {    fontSize: 10,    fontFamily: 'monospace',    color: '#334155',    backgroundColor: '#F8FAFC',    padding: 8,    borderRadius: 8,    borderWidth: 1,    borderColor: '#E2E8F0',  },  responseText: {    fontSize: 12,    color: '#166534',    backgroundColor: '#F0FDF4',    padding: 8,    borderRadius: 8,    borderWidth: 1,    borderColor: '#BBF7D0',  },  responseTextError: {    color: '#DC2626',    backgroundColor: '#FEF2F2',    borderColor: '#FECACA',  },  controlContainer: {    padding: 16,  },  controlButton: {    flexDirection: 'row',    alignItems: 'center',    justifyContent: 'center',    paddingVertical: 16,    borderRadius: 16,    elevation: 4,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.2,    shadowRadius: 8,  },  startButton: {    backgroundColor: '#4CAF50',  },  stopButton: {    backgroundColor: '#FF5252',  },  controlButtonIcon: {    fontSize: 20,    marginRight: 8,  },  controlButtonText: {    color: '#fff',    fontSize: 16,    fontWeight: '700',  },});

export default TransmissionPage;